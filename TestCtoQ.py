import unittest
import SaltoCl√°sicoAQuantico as CtoQ

class TestClasicoACuantico(unittest.TestCase):
    def test_momentoMatrix(self):
        m = [[False, False, False, False, False, False],
                  [False, False, False, False, False, False],
                  [False, True, False, False, False, True],
                  [False, False, False, True, False, False],
                  [False, False, True, False, False, False],
                  [True, False, False, False, True, False]]
        vec = [(6,0),(2,0),(1,0),(5,0),(3,0),(10,0)]
        self.assertEqual(CtoQ.momentoMatrix(m,vec,1),[(0,0),(0,0),(12,0),(5,0),(1,0),(9,0)])

    def test_rendijasPro(self):
        self.assertEqual(CtoQ.rendijasPro(2,3,2),([[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                             [(0.5, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                             [(0.5, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                             [(0, 0), (0.3333333333333333, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                             [(0, 0), (0.3333333333333333, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
                                                                             [(0, 0), (0.3333333333333333, 0), (0.3333333333333333, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
                                                                             [(0, 0), (0, 0), (0.3333333333333333, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
                                                                             [(0, 0), (0, 0), (0.3333333333333333, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]], [(0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (0.16666666666666666, 0.0), (0.16666666666666666, 0.0), (0.3333333333333333, 0.0), (0.16666666666666666, 0.0), (0.16666666666666666, 0.0)]))

    def test_transCplxInterf(self):
        self.assertEqual(CtoQ.transCplxInterf(2,3,2),([[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                [(0.7071067811865475, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                [(0.7071067811865475, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                [(0, 0), (-0.4082482904638631, 0.4082482904638631), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                                                [(0, 0), (-0.4082482904638631, -0.4082482904638631), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],
                                                                [(0, 0), (0.4082482904638631, -0.4082482904638631), (-0.4082482904638631, 0.4082482904638631), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],
                                                                [(0, 0), (0, 0), (-0.4082482904638631, -0.4082482904638631), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],
                                                                [(0, 0), (0, 0), (0.4082482904638631, -0.4082482904638631), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]],
                                                               [(0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (-0.2886751345948129, -0.2171794291568874), (-0.2886751345948129, 0.2171794291568874), (0.0, -0.666666666666667), (-0.2886751345948129, 0.2171794291568874), (0.2886751345948129, -0.4494872375097795)]))

if __name__=='__main__':
    unittest.main()
    